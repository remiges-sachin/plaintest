{
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Define test data for smoke tests",
          "const smokeTestData = {",
          "    'TC_INQ_REQ_001': {",
          "        input_pan_no: '',",
          "        input_dob: '',",
          "        input_iop_flag: '',",
          "        input_pos_code: '',",
          "        input_okra_code: '',",
          "        input_okra_batch: '',",
          "        input_request_date: '',",
          "        input_total_records: '',",
          "        expected_http_status: '400',",
          "        expected_app_status: ''",
          "    },",
          "    'TC_INQ_REQ_002': {",
          "        input_pan_no: 'OVSWF8950H',",
          "        input_dob: '28-08-1996',",
          "        input_iop_flag: 'IE',",
          "        input_pos_code: 'A1249',",
          "        input_okra_code: 'CVL',",
          "        input_okra_batch: '1234',",
          "        input_request_date: new Date().toLocaleDateString('en-GB').split('/').join('-'),",
          "        input_total_records: '1',",
          "        expected_http_status: '200',",
          "        expected_app_status: 'Success'",
          "    },",
          "    'TC_INQ_REQ_004': {",
          "        input_pan_no: '!@#$%^\u0026*',",
          "        input_dob: '28-08-1996',",
          "        input_iop_flag: 'IE',",
          "        input_pos_code: 'A1249',",
          "        input_okra_code: 'CVL',",
          "        input_okra_batch: '1234',",
          "        input_request_date: new Date().toLocaleDateString('en-GB').split('/').join('-'),",
          "        input_total_records: '1',",
          "        expected_http_status: '200',",
          "        expected_app_status: 'WEBERR-999'",
          "    }",
          "};",
          "",
          "// Extract test ID from request name",
          "const requestName = pm.info.requestName;",
          "const testIdMatch = requestName.match(/TC_INQ_REQ_\\d{3}/);",
          "",
          "if (testIdMatch) {",
          "    const testId = testIdMatch[0];",
          "    const testData = smokeTestData[testId];",
          "    ",
          "    if (testData) {",
          "        // Set variables from test data",
          "        Object.keys(testData).forEach(key =\u003e {",
          "            pm.variables.set(key, testData[key]);",
          "        });",
          "        ",
          "        console.log(`[START] Smoke Test: ${testId}`);",
          "    }",
          "}"
        ],
        "type": "text/javascript"
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": [
          "// Smoke test validation - only run for PAN validation requests",
          "// Skip collection-level tests for Get Password request",
          "if (!pm.info.requestName.includes('Get Password')) {",
          "    const expectedHttpStatus = parseInt(pm.variables.get('expected_http_status'));",
          "    const expectedAppStatus = pm.variables.get('expected_app_status');",
          "    ",
          "    // Validate HTTP Status",
          "    if (!isNaN(expectedHttpStatus)) {",
          "        pm.test(`[PASS] HTTP Status: ${expectedHttpStatus}`, function () {",
          "            pm.response.to.have.status(expectedHttpStatus);",
          "        });",
          "    }",
          "    ",
          "    // Validate Response Time",
          "    pm.test('[PASS] Response Time (\u003c 3000ms)', function () {",
          "        pm.expect(pm.response.responseTime).to.be.below(3000);",
          "    });",
          "    ",
          "    // Validate XML response structure",
          "    pm.test('[PASS] Valid XML Response', function () {",
          "        const responseText = pm.response.text();",
          "        pm.expect(responseText).to.include('PANValidation');",
          "        pm.expect(responseText).to.match(/\u003c\\?xml|\u003csoap/);",
          "    });",
          "    ",
          "    // Validate Application Status",
          "    if (expectedAppStatus) {",
          "        const responseText = pm.response.text();",
          "        ",
          "        if (expectedAppStatus === 'Success') {",
          "            pm.test('[PASS] Success Response', function () {",
          "                pm.expect(responseText).to.include('APP_RES_ROOT');",
          "            });",
          "        } else {",
          "            pm.test(`[PASS] Error Code: ${expectedAppStatus}`, function () {",
          "                pm.expect(responseText).to.include(expectedAppStatus);",
          "            });",
          "        }",
          "    }",
          "}",
          "",
          "// Log test execution result",
          "if (pm.test.results \u0026\u0026 pm.test.results.length \u003e 0) {",
          "    const allPassed = pm.test.results.every(result =\u003e result.pass);",
          "    const status = allPassed ? '[SUCCESS] SMOKE PASS' : '[FAILURE] SMOKE FAIL';",
          "    console.log(`${status} - ${pm.info.requestName}`);",
          "}"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "info": {
    "_exporter_id": "3238149",
    "_postman_id": "9a71b54c-8c75-4f83-a14a-69b01f2bf0d2",
    "description": "Smoke tests for PAN validation API - validates basic functionality",
    "name": "PAN_Validation_SMOKE_Tests",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Parse password from SOAP response",
              "if (pm.response.code === 200) {",
              "    const responseXml = pm.response.text();",
              "    const xml2js = require('xml2js');",
              "    const parseString = xml2js.parseString;",
              "    ",
              "    parseString(responseXml, { explicitArray: false }, (err, result) =\u003e {",
              "        if (err) {",
              "            console.error('Error parsing XML:', err);",
              "            return;",
              "        }",
              "        ",
              "        try {",
              "            // Handle different SOAP envelope formats",
              "            let password;",
              "            if (result['soap:Envelope']) {",
              "                password = result['soap:Envelope']['soap:Body']['GetPasswordResponse']['GetPasswordResult'];",
              "            } else if (result['soap12:Envelope']) {",
              "                password = result['soap12:Envelope']['soap12:Body']['GetPasswordResponse']['GetPasswordResult'];",
              "            }",
              "            ",
              "            if (password) {",
              "                pm.environment.set('password', password);",
              "                console.log('[PASSWORD] Password retrieved');",
              "            }",
              "            ",
              "            pm.test('[PASSWORD] Password Service Available', function () {",
              "                pm.response.to.have.status(200);",
              "                pm.expect(password).to.be.a('string');",
              "            });",
              "        } catch (error) {",
              "            console.error('Error extracting password:', error);",
              "        }",
              "    });",
              "} else {",
              "    console.log('Password service returned error:', pm.response.code);",
              "    console.log('Response:', pm.response.text());",
              "    ",
              "    // Check if password already exists in environment",
              "    const existingPassword = pm.environment.get('password');",
              "    if (existingPassword) {",
              "        console.log('Using existing password from environment');",
              "    } else {",
              "        console.log('No password available - using default');",
              "        pm.environment.set('password', 'default-test-password');",
              "    }",
              "    ",
              "    pm.test('Password service status', function () {",
              "        console.log('Password service returned non-200 status, but continuing with existing/default password');",
              "    });",
              "}"
            ],
            "packages": {},
            "type": "text/javascript"
          }
        }
      ],
      "name": "Get Password",
      "request": {
        "body": {
          "mode": "raw",
          "options": {
            "raw": {
              "language": "xml"
            }
          },
          "raw": "\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003csoap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\"\u003e\n    \u003csoap12:Body\u003e\n        \u003cGetPassword xmlns=\"https://test.cvlkra.com/\"\u003e\n            \u003cpassword\u003eTest@123\u003c/password\u003e\n            \u003cPassKey\u003e123\u003c/PassKey\u003e\n        \u003c/GetPassword\u003e\n    \u003c/soap12:Body\u003e\n\u003c/soap12:Envelope\u003e"
        },
        "header": [
          {
            "key": "SOAPAction",
            "value": "{{protocol}}://{{base_url}}/get_password"
          },
          {
            "key": "Content-Type",
            "value": "application/xml"
          }
        ],
        "method": "POST",
        "url": {
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "get_password"
          ],
          "protocol": "{{protocol}}",
          "raw": "{{protocol}}://{{base_url}}/get_password"
        }
      },
      "response": []
    },
    {
      "name": "TC_INQ_REQ_001 - Blank Field Validation",
      "request": {
        "body": {
          "mode": "raw",
          "raw": "\u003csoap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\"\u003e\n  \u003csoap12:Body\u003e\n    \u003cPANValidation xmlns=\"https://test.cvlkra.com/\"\u003e\n      \u003cinputXML\u003e\n        \u003c![CDATA[\n          \u003cAPP_REQ_ROOT\u003e\n            \u003cAPP_PAN_INQ\u003e\n              \u003cAPP_PAN_NO\u003e{{input_pan_no}}\u003c/APP_PAN_NO\u003e\n              \u003cAPP_PAN_DOB\u003e{{input_dob}}\u003c/APP_PAN_DOB\u003e\n              \u003cAPP_IOP_FLG\u003e{{input_iop_flag}}\u003c/APP_IOP_FLG\u003e\n              \u003cAPP_POS_CODE\u003e{{input_pos_code}}\u003c/APP_POS_CODE\u003e\n            \u003c/APP_PAN_INQ\u003e\n            \u003cAPP_SUMM_REC\u003e\n              \u003cAPP_OTHKRA_CODE\u003e{{input_okra_code}}\u003c/APP_OTHKRA_CODE\u003e\n              \u003cAPP_OTHKRA_BATCH\u003e{{input_okra_batch}}\u003c/APP_OTHKRA_BATCH\u003e\n              \u003cAPP_REQ_DATE\u003e{{input_request_date}}\u003c/APP_REQ_DATE\u003e\n              \u003cAPP_TOTAL_REC\u003e{{input_total_records}}\u003c/APP_TOTAL_REC\u003e\n            \u003c/APP_SUMM_REC\u003e\n          \u003c/APP_REQ_ROOT\u003e\n        ]]\u003e\n      \u003c/inputXML\u003e\n      \u003cuserName\u003ecvl.admin\u003c/userName\u003e\n      \u003cPosCode\u003ecvlkra20\u003c/PosCode\u003e\n      \u003cpassword\u003e{{password}}\u003c/password\u003e\n      \u003cPassKey\u003e123\u003c/PassKey\u003e\n    \u003c/PANValidation\u003e\n  \u003c/soap12:Body\u003e\n\u003c/soap12:Envelope\u003e"
        },
        "header": [
          {
            "key": "SOAPAction",
            "value": "{{protocol}}://{{base_url}}/pan_validation"
          },
          {
            "key": "Content-Type",
            "value": "application/xml"
          }
        ],
        "method": "POST",
        "url": {
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "pan_validation"
          ],
          "protocol": "{{protocol}}",
          "raw": "{{protocol}}://{{base_url}}/pan_validation"
        }
      },
      "response": []
    },
    {
      "name": "TC_INQ_REQ_002 - Valid PAN Success",
      "request": {
        "body": {
          "mode": "raw",
          "raw": "\u003csoap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\"\u003e\n  \u003csoap12:Body\u003e\n    \u003cPANValidation xmlns=\"https://test.cvlkra.com/\"\u003e\n      \u003cinputXML\u003e\n        \u003c![CDATA[\n          \u003cAPP_REQ_ROOT\u003e\n            \u003cAPP_PAN_INQ\u003e\n              \u003cAPP_PAN_NO\u003e{{input_pan_no}}\u003c/APP_PAN_NO\u003e\n              \u003cAPP_PAN_DOB\u003e{{input_dob}}\u003c/APP_PAN_DOB\u003e\n              \u003cAPP_IOP_FLG\u003e{{input_iop_flag}}\u003c/APP_IOP_FLG\u003e\n              \u003cAPP_POS_CODE\u003e{{input_pos_code}}\u003c/APP_POS_CODE\u003e\n            \u003c/APP_PAN_INQ\u003e\n            \u003cAPP_SUMM_REC\u003e\n              \u003cAPP_OTHKRA_CODE\u003e{{input_okra_code}}\u003c/APP_OTHKRA_CODE\u003e\n              \u003cAPP_OTHKRA_BATCH\u003e{{input_okra_batch}}\u003c/APP_OTHKRA_BATCH\u003e\n              \u003cAPP_REQ_DATE\u003e{{input_request_date}}\u003c/APP_REQ_DATE\u003e\n              \u003cAPP_TOTAL_REC\u003e{{input_total_records}}\u003c/APP_TOTAL_REC\u003e\n            \u003c/APP_SUMM_REC\u003e\n          \u003c/APP_REQ_ROOT\u003e\n        ]]\u003e\n      \u003c/inputXML\u003e\n      \u003cuserName\u003ecvl.admin\u003c/userName\u003e\n      \u003cPosCode\u003ecvlkra20\u003c/PosCode\u003e\n      \u003cpassword\u003e{{password}}\u003c/password\u003e\n      \u003cPassKey\u003e123\u003c/PassKey\u003e\n    \u003c/PANValidation\u003e\n  \u003c/soap12:Body\u003e\n\u003c/soap12:Envelope\u003e"
        },
        "header": [
          {
            "key": "SOAPAction",
            "value": "{{protocol}}://{{base_url}}/pan_validation"
          },
          {
            "key": "Content-Type",
            "value": "application/xml"
          }
        ],
        "method": "POST",
        "url": {
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "pan_validation"
          ],
          "protocol": "{{protocol}}",
          "raw": "{{protocol}}://{{base_url}}/pan_validation"
        }
      },
      "response": []
    },
    {
      "name": "TC_INQ_REQ_004 - Invalid PAN Rejection",
      "request": {
        "body": {
          "mode": "raw",
          "raw": "\u003csoap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\"\u003e\n  \u003csoap12:Body\u003e\n    \u003cPANValidation xmlns=\"https://test.cvlkra.com/\"\u003e\n      \u003cinputXML\u003e\n        \u003c![CDATA[\n          \u003cAPP_REQ_ROOT\u003e\n            \u003cAPP_PAN_INQ\u003e\n              \u003cAPP_PAN_NO\u003e{{input_pan_no}}\u003c/APP_PAN_NO\u003e\n              \u003cAPP_PAN_DOB\u003e{{input_dob}}\u003c/APP_PAN_DOB\u003e\n              \u003cAPP_IOP_FLG\u003e{{input_iop_flag}}\u003c/APP_IOP_FLG\u003e\n              \u003cAPP_POS_CODE\u003e{{input_pos_code}}\u003c/APP_POS_CODE\u003e\n            \u003c/APP_PAN_INQ\u003e\n            \u003cAPP_SUMM_REC\u003e\n              \u003cAPP_OTHKRA_CODE\u003e{{input_okra_code}}\u003c/APP_OTHKRA_CODE\u003e\n              \u003cAPP_OTHKRA_BATCH\u003e{{input_okra_batch}}\u003c/APP_OTHKRA_BATCH\u003e\n              \u003cAPP_REQ_DATE\u003e{{input_request_date}}\u003c/APP_REQ_DATE\u003e\n              \u003cAPP_TOTAL_REC\u003e{{input_total_records}}\u003c/APP_TOTAL_REC\u003e\n            \u003c/APP_SUMM_REC\u003e\n          \u003c/APP_REQ_ROOT\u003e\n        ]]\u003e\n      \u003c/inputXML\u003e\n      \u003cuserName\u003ecvl.admin\u003c/userName\u003e\n      \u003cPosCode\u003ecvlkra20\u003c/PosCode\u003e\n      \u003cpassword\u003e{{password}}\u003c/password\u003e\n      \u003cPassKey\u003e123\u003c/PassKey\u003e\n    \u003c/PANValidation\u003e\n  \u003c/soap12:Body\u003e\n\u003c/soap12:Envelope\u003e"
        },
        "header": [
          {
            "key": "SOAPAction",
            "value": "{{protocol}}://{{base_url}}/pan_validation"
          },
          {
            "key": "Content-Type",
            "value": "application/xml"
          }
        ],
        "method": "POST",
        "url": {
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "pan_validation"
          ],
          "protocol": "{{protocol}}",
          "raw": "{{protocol}}://{{base_url}}/pan_validation"
        }
      },
      "response": []
    }
  ]
}
