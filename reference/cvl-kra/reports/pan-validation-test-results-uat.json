{
  "collection": {
    "item": [
      {
        "id": "c42aaeeb-af7c-494a-8b38-436869450480",
        "name": "{{test_id}} - {{test_description}}",
        "request": {
          "url": {
            "protocol": "{{protocol}}",
            "path": [
              "pan_validation"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "SOAPAction",
              "value": "{{protocol}}://{{base_url}}/pan_validation"
            },
            {
              "key": "Content-Type",
              "value": "application/xml"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <PANValidation xmlns=\"https://test.cvlkra.com/\">\n      <inputXML>\n        <![CDATA[\n          <APP_REQ_ROOT>\n            <APP_PAN_INQ>\n              <APP_PAN_NO>{{input_pan_no}}</APP_PAN_NO>\n              <APP_PAN_DOB>{{input_dob}}</APP_PAN_DOB>\n              <APP_IOP_FLG>{{input_iop_flag}}</APP_IOP_FLG>\n              <APP_POS_CODE>{{input_pos_code}}</APP_POS_CODE>\n            </APP_PAN_INQ>\n            <APP_SUMM_REC>\n              <APP_OTHKRA_CODE>{{input_okra_code}}</APP_OTHKRA_CODE>\n              <APP_OTHKRA_BATCH>{{input_okra_batch}}</APP_OTHKRA_BATCH>\n              <APP_REQ_DATE>{{input_request_date}}</APP_REQ_DATE>\n              <APP_TOTAL_REC>{{input_total_records}}</APP_TOTAL_REC>\n            </APP_SUMM_REC>\n          </APP_REQ_ROOT>\n        ]]>\n      </inputXML>\n      <userName>cvl.admin</userName>\n      <PosCode>cvlkra20</PosCode>\n      <password>{{password}}</password>\n      <PassKey>123</PassKey>\n    </PANValidation>\n  </soap12:Body>\n</soap12:Envelope>"
          }
        },
        "response": [],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "837b8e22-ad37-4c2a-85e7-7d0a3c0e361e",
          "type": "text/javascript",
          "exec": [
            "// Newman automatically sets all CSV column values as variables",
            "// This runs once per CSV row (97 iterations total)",
            "",
            "// Set current date in dd-mm-yyyy format",
            "const today = new Date().toLocaleDateString('en-GB').split('/').join('-');",
            "pm.variables.set('input_request_date', today);",
            "",
            "const testId = pm.variables.get('test_id');",
            "const testDescription = pm.variables.get('test_description');",
            "const expectedHttp = pm.variables.get('expected_http_status');",
            "const expectedApp = pm.variables.get('expected_app_status');",
            "",
            "// Log current test details",
            "console.log(`\\n[TEST] Test ${testId}: ${testDescription}`);",
            "console.log(`[INPUT] Input Data:`, {",
            "    PAN: pm.variables.get('input_pan_no') || 'BLANK',",
            "    DOB: pm.variables.get('input_dob') || 'BLANK',",
            "    IOP: pm.variables.get('input_iop_flag') || 'BLANK',",
            "    POS: pm.variables.get('input_pos_code') || 'BLANK',",
            "    OKRA_Code: pm.variables.get('input_okra_code') || 'BLANK',",
            "    OKRA_Batch: pm.variables.get('input_okra_batch') || 'BLANK',",
            "    Req_Date: pm.variables.get('input_request_date') || 'BLANK',",
            "    Total_Records: pm.variables.get('input_total_records') || 'BLANK'",
            "});",
            "console.log(`[EXPECTED] Expected: HTTP ${expectedHttp}, App: ${expectedApp}`);"
          ],
          "_lastExecutionId": "c0d090eb-e8c7-49e0-b1f6-dc4599b1eb9e"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "997480f6-602d-436c-aa21-2a9b14587610",
          "type": "text/javascript",
          "exec": [
            "// Get expected values from CSV data (automatically set by Newman)",
            "const expectedHttpStatus = parseInt(pm.variables.get('expected_http_status'));",
            "const expectedAppStatus = pm.variables.get('expected_app_status');",
            "const testId = pm.variables.get('test_id');",
            "const testDescription = pm.variables.get('test_description');",
            "",
            "// Test 1: HTTP Status Code",
            "pm.test(`${testId} - HTTP Status should be ${expectedHttpStatus}`, function () {",
            "    pm.response.to.have.status(expectedHttpStatus);",
            "});",
            "",
            "// Test 2: Response Time",
            "pm.test(`${testId} - Response time (< 5000ms)`, function () {",
            "    pm.expect(pm.response.responseTime).to.be.below(5000);",
            "});",
            "",
            "// Test 3: Content Type",
            "pm.test(`${testId} - Response content type is XML`, function () {",
            "    const contentType = pm.response.headers.get('Content-Type');",
            "    pm.expect(contentType).to.include('xml');",
            "});",
            "",
            "// Parse XML and validate response fields",
            "const responseText = pm.response.text();",
            "const xml2js = require('xml2js');",
            "const parseString = xml2js.parseString;",
            "",
            "parseString(responseText, { explicitArray: false }, (err, result) => {",
            "    if (err) {",
            "        console.error('Error parsing XML:', err);",
            "        pm.test(`${testId} - XML response parseable`, function () {",
            "            pm.expect.fail('Failed to parse XML response: ' + err.message);",
            "        });",
            "        return;",
            "    }",
            "    ",
            "    try {",
            "        // Extract response structure",
            "        const envelope = result['soap12:Envelope'] || result['soap:Envelope'];",
            "        const body = envelope['soap12:Body'] || envelope['soap:Body'];",
            "        const panValidationResponse = body['PANValidationResponse'];",
            "        const panValidationResult = panValidationResponse['PANValidationResult'];",
            "        const appResRoot = panValidationResult['APP_RES_ROOT'];",
            "        ",
            "        if (expectedHttpStatus === 200) {",
            "            // Validate response structure",
            "            pm.test(`${testId} - Response has correct SOAP structure`, function () {",
            "                pm.expect(appResRoot).to.be.an('object');",
            "                pm.expect(appResRoot['APP_PAN_INQ']).to.be.an('object');",
            "                pm.expect(appResRoot['APP_PAN_SUMM']).to.be.an('object');",
            "            });",
            "            ",
            "            const panInq = appResRoot['APP_PAN_INQ'];",
            "            const panSumm = appResRoot['APP_PAN_SUMM'];",
            "            ",
            "            // Test APP_STATUS field specifically",
            "            pm.test(`${testId} - APP_STATUS should be ${expectedAppStatus}`, function () {",
            "                pm.expect(panInq['APP_STATUS']).to.equal(expectedAppStatus);",
            "            });",
            "            ",
            "            // Validate PAN number is returned",
            "            const inputPan = pm.variables.get('input_pan_no');",
            "            if (inputPan) {",
            "                pm.test(`${testId} - PAN number echoed correctly`, function () {",
            "                    pm.expect(panInq['APP_PAN_NO']).to.equal(inputPan);",
            "                });",
            "            }",
            "            ",
            "            // Validate OKRA code is returned",
            "            const inputOkraCode = pm.variables.get('input_okra_code');",
            "            if (inputOkraCode) {",
            "                pm.test(`${testId} - OKRA code preserved`, function () {",
            "                    pm.expect(panSumm['APP_OTHKRA_CODE']).to.equal(inputOkraCode);",
            "                });",
            "            }",
            "            ",
            "            // Validate OKRA batch is returned",
            "            const inputOkraBatch = pm.variables.get('input_okra_batch');",
            "            if (inputOkraBatch) {",
            "                pm.test(`${testId} - OKRA batch preserved`, function () {",
            "                    pm.expect(panSumm['APP_OTHKRA_BATCH']).to.equal(String(inputOkraBatch));",
            "                });",
            "            }",
            "            ",
            "            // Validate total records is returned",
            "            const inputTotalRecords = pm.variables.get('input_total_records');",
            "            if (inputTotalRecords) {",
            "                pm.test(`${testId} - Total records preserved`, function () {",
            "                    pm.expect(panSumm['APP_TOTAL_REC']).to.equal(String(inputTotalRecords));",
            "                });",
            "            }",
            "            ",
            "            // Validate response date format",
            "            pm.test(`${testId} - Response date is present`, function () {",
            "                const responseDate = panSumm['APP_RESPONSE_DATE'];",
            "                pm.expect(responseDate).to.be.a('string');",
            "                pm.expect(responseDate.length).to.be.greaterThan(0);",
            "            });",
            "            ",
            "        } else {",
            "            // For non-200 responses, still try to parse if XML structure exists",
            "            console.log(`[${testId}] Non-200 response - checking for error structure`);",
            "        }",
            "        ",
            "    } catch (parseError) {",
            "        console.error('Error extracting fields from parsed XML:', parseError);",
            "        pm.test(`${testId} - XML structure should be valid`, function () {",
            "            pm.expect.fail('Failed to extract fields from XML: ' + parseError.message);",
            "        });",
            "    }",
            "});",
            "",
            "// Test 5: SOAP Envelope Structure",
            "pm.test(`${testId} - Valid SOAP response structure`, function () {",
            "    pm.expect(responseText).to.match(/<soap.*:Envelope|<.*:Envelope/);",
            "    pm.expect(responseText).to.include('PANValidation');",
            "});",
            "",
            "// Log test completion",
            "if (pm.test && pm.test.results && pm.test.results.length > 0) {",
            "    const testResults = pm.test.results;",
            "    const passed = testResults.filter(result => result.pass).length;",
            "    const total = testResults.length;",
            "    const status = passed === total ? '[PASS] PASS' : '[FAIL] FAIL';",
            "    ",
            "    console.log(`${status} ${testId}: ${passed}/${total} tests passed`);",
            "    ",
            "    if (passed < total) {",
            "        const failures = testResults.filter(result => !result.pass);",
            "        console.log('[FAIL] Failed assertions:');",
            "        failures.forEach(failure => {",
            "            console.log(`   - ${failure.name}`);",
            "        });",
            "    }",
            "} else {",
            "    console.log(`[COMPLETE] ${testId} - Tests completed`);",
            "}"
          ],
          "_lastExecutionId": "e3a27b20-01ea-4adc-a8de-cf860036a801"
        }
      }
    ],
    "variable": [
      {
        "type": "any",
        "value": "localhost:8083",
        "key": "base_url"
      },
      {
        "type": "any",
        "value": "http",
        "key": "protocol"
      }
    ],
    "info": {
      "_postman_id": "aa3f0ef8-d277-4de6-adc7-188a9308e087",
      "name": "PAN_Validation_Tests",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Data-driven collection for PAN validation API - executes with CSV data via Newman -d flag",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2025-09-04T07:41:16.796Z",
      "postman_exported_using": "Newman/6.2.1"
    },
    "id": "uat-env-001",
    "name": "UAT Environment",
    "values": [
      {
        "type": "any",
        "value": "https",
        "key": "protocol"
      },
      {
        "type": "any",
        "value": "uat.cvlkra.remiges.tech/api",
        "key": "base_url"
      },
      {
        "type": "any",
        "value": "Eif6Lvo7L3irJZnPWjgJEL9QQo3QK2ie19FvtcdyaU/IB3d1",
        "key": "password"
      }
    ]
  },
  "globals": {
    "id": "e45bd274-d43a-4ac2-8c09-14a75ecf8bc8",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 11,
        "pending": 0,
        "failed": 1
      },
      "testScripts": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 83,
      "responseMin": 83,
      "responseMax": 83,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1756971677127,
      "completed": 1756971678250
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 1,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c1a6177b-1d06-4880-a29e-768a660e8d6b",
          "httpRequestId": "3fb93f20-ce5c-48c3-a756-aa8101ce0401"
        },
        "item": {
          "id": "c42aaeeb-af7c-494a-8b38-436869450480",
          "name": "{{test_id}} - {{test_description}}",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "path": [
                "pan_validation"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "SOAPAction",
                "value": "{{protocol}}://{{base_url}}/pan_validation"
              },
              {
                "key": "Content-Type",
                "value": "application/xml"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <PANValidation xmlns=\"https://test.cvlkra.com/\">\n      <inputXML>\n        <![CDATA[\n          <APP_REQ_ROOT>\n            <APP_PAN_INQ>\n              <APP_PAN_NO>{{input_pan_no}}</APP_PAN_NO>\n              <APP_PAN_DOB>{{input_dob}}</APP_PAN_DOB>\n              <APP_IOP_FLG>{{input_iop_flag}}</APP_IOP_FLG>\n              <APP_POS_CODE>{{input_pos_code}}</APP_POS_CODE>\n            </APP_PAN_INQ>\n            <APP_SUMM_REC>\n              <APP_OTHKRA_CODE>{{input_okra_code}}</APP_OTHKRA_CODE>\n              <APP_OTHKRA_BATCH>{{input_okra_batch}}</APP_OTHKRA_BATCH>\n              <APP_REQ_DATE>{{input_request_date}}</APP_REQ_DATE>\n              <APP_TOTAL_REC>{{input_total_records}}</APP_TOTAL_REC>\n            </APP_SUMM_REC>\n          </APP_REQ_ROOT>\n        ]]>\n      </inputXML>\n      <userName>cvl.admin</userName>\n      <PosCode>cvlkra20</PosCode>\n      <password>{{password}}</password>\n      <PassKey>123</PassKey>\n    </PANValidation>\n  </soap12:Body>\n</soap12:Envelope>"
            }
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "pan_validation"
            ],
            "host": [
              "uat",
              "cvlkra",
              "remiges",
              "tech"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "SOAPAction",
              "value": "https://uat.cvlkra.remiges.tech/api/pan_validation"
            },
            {
              "key": "Content-Type",
              "value": "application/xml"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "90d50dda-afe9-4791-b0cb-5041f92f100f",
              "system": true
            },
            {
              "key": "Host",
              "value": "uat.cvlkra.remiges.tech",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "1003",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <PANValidation xmlns=\"https://test.cvlkra.com/\">\n      <inputXML>\n        <![CDATA[\n          <APP_REQ_ROOT>\n            <APP_PAN_INQ>\n              <APP_PAN_NO>aaaaa1234a</APP_PAN_NO>\n              <APP_PAN_DOB>28-08-2004</APP_PAN_DOB>\n              <APP_IOP_FLG>IE</APP_IOP_FLG>\n              <APP_POS_CODE>A1257</APP_POS_CODE>\n            </APP_PAN_INQ>\n            <APP_SUMM_REC>\n              <APP_OTHKRA_CODE>CVL</APP_OTHKRA_CODE>\n              <APP_OTHKRA_BATCH>1234</APP_OTHKRA_BATCH>\n              <APP_REQ_DATE>04-09-2025</APP_REQ_DATE>\n              <APP_TOTAL_REC>1</APP_TOTAL_REC>\n            </APP_SUMM_REC>\n          </APP_REQ_ROOT>\n        ]]>\n      </inputXML>\n      <userName>cvl.admin</userName>\n      <PosCode>cvlkra20</PosCode>\n      <password>Eif6Lvo7L3irJZnPWjgJEL9QQo3QK2ie19FvtcdyaU/IB3d1</password>\n      <PassKey>123</PassKey>\n    </PANValidation>\n  </soap12:Body>\n</soap12:Envelope>"
          }
        },
        "response": {
          "id": "61aadcfa-a51e-476c-914d-5e7a8432204a",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Thu, 04 Sep 2025 07:41:18 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/xml"
            },
            {
              "key": "Content-Length",
              "value": "1450"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization, X-Trace-ID"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, PATCH, DELETE"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              115,
              111,
              97,
              112,
              49,
              50,
              58,
              69,
              110,
              118,
              101,
              108,
              111,
              112,
              101,
              62,
              10,
              32,
              32,
              60,
              115,
              111,
              97,
              112,
              49,
              50,
              58,
              66,
              111,
              100,
              121,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              80,
              65,
              78,
              86,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              32,
              120,
              109,
              108,
              110,
              115,
              61,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              116,
              101,
              115,
              116,
              46,
              99,
              118,
              108,
              107,
              114,
              97,
              46,
              99,
              111,
              109,
              47,
              34,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              80,
              65,
              78,
              86,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              82,
              101,
              115,
              117,
              108,
              116,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              65,
              80,
              80,
              95,
              82,
              69,
              83,
              95,
              82,
              79,
              79,
              84,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              65,
              80,
              80,
              95,
              80,
              65,
              78,
              95,
              73,
              78,
              81,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              65,
              80,
              80,
              95,
              80,
              65,
              78,
              95,
              78,
              79,
              62,
              97,
              97,
              97,
              97,
              97,
              49,
              50,
              51,
              52,
              97,
              60,
              47,
              65,
              80,
              80,
              95,
              80,
              65,
              78,
              95,
              78,
              79,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              65,
              80,
              80,
              95,
              78,
              65,
              77,
              69,
              62,
              60,
              47,
              65,
              80,
              80,
              95,
              78,
              65,
              77,
              69,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              65,
              80,
              80,
              95,
              73,
              79,
              80,
              95,
              70,
              76,
              71,
              62,
              60,
              47,
              65,
              80,
              80,
              95,
              73,
              79,
              80,
              95,
              70,
              76,
              71,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              65,
              80,
              80,
              95,
              83,
              84,
              65,
              84,
              85,
              83,
              62,
              87,
              69,
              66,
              69,
              82,
              82,
              45,
              48,
              52,
              52,
              60,
              47,
              65,
              80,
              80,
              95,
              83,
              84,
              65,
              84,
              85,
              83,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              65,
              80,
              80,
              95,
              80,
              65,
              78,
              95,
              68,
              79,
              66,
              62,
              60,
              47,
              65,
              80,
              80,
              95,
              80,
              65,
              78,
              95,
              68,
              79,
              66,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              65,
              80,
              80,
              95,
              69,
              78,
              84,
              82,
              89,
              68,
              84,
              62,
              60,
              47,
              65,
              80,
              80,
              95,
              69,
              78,
              84,
              82,
              89,
              68,
              84,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              65,
              80,
              80,
              95,
              83,
              84,
              65,
              84,
              85,
              83,
              68,
              84,
              62,
              60,
              47,
              65,
              80,
              80,
              95,
              83,
              84,
              65,
              84,
              85,
              83,
              68,
              84,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              65,
              80,
              80,
              95,
              77,
              79,
              68,
              68,
              84,
              62,
              60,
              47,
              65,
              80,
              80,
              95,
              77,
              79,
              68,
              68,
              84,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              65,
              80,
              80,
              95,
              80,
              79,
              83,
              95,
              67,
              79,
              68,
              69,
              62,
              60,
              47,
              65,
              80,
              80,
              95,
              80,
              79,
              83,
              95,
              67,
              79,
              68,
              69,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              65,
              80,
              80,
              95,
              83,
              84,
              65,
              84,
              85,
              83,
              95,
              68,
              69,
              76,
              84,
              65,
              62,
              60,
              47,
              65,
              80,
              80,
              95,
              83,
              84,
              65,
              84,
              85,
              83,
              95,
              68,
              69,
              76,
              84,
              65,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              65,
              80,
              80,
              95,
              85,
              80,
              68,
              84,
              95,
              83,
              84,
              65,
              84,
              85,
              83,
              62,
              87,
              69,
              66,
              69,
              82,
              82,
              45,
              48,
              52,
              52,
              60,
              47,
              65,
              80,
              80,
              95,
              85,
              80,
              68,
              84,
              95,
              83,
              84,
              65,
              84,
              85,
              83,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              65,
              80,
              80,
              95,
              72,
              79,
              76,
              68,
              95,
              68,
              69,
              65,
              67,
              84,
              73,
              86,
              69,
              95,
              82,
              77,
              75,
              83,
              62,
              60,
              47,
              65,
              80,
              80,
              95,
              72,
              79,
              76,
              68,
              95,
              68,
              69,
              65,
              67,
              84,
              73,
              86,
              69,
              95,
              82,
              77,
              75,
              83,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              65,
              80,
              80,
              95,
              85,
              80,
              68,
              84,
              95,
              82,
              77,
              75,
              83,
              62,
              60,
              47,
              65,
              80,
              80,
              95,
              85,
              80,
              68,
              84,
              95,
              82,
              77,
              75,
              83,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              65,
              80,
              80,
              95,
              75,
              89,
              67,
              95,
              77,
              79,
              68,
              69,
              62,
              60,
              47,
              65,
              80,
              80,
              95,
              75,
              89,
              67,
              95,
              77,
              79,
              68,
              69,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              65,
              80,
              80,
              95,
              73,
              80,
              86,
              95,
              70,
              76,
              65,
              71,
              62,
              60,
              47,
              65,
              80,
              80,
              95,
              73,
              80,
              86,
              95,
              70,
              76,
              65,
              71,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              65,
              80,
              80,
              95,
              85,
              66,
              79,
              95,
              70,
              76,
              65,
              71,
              62,
              60,
              47,
              65,
              80,
              80,
              95,
              85,
              66,
              79,
              95,
              70,
              76,
              65,
              71,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              65,
              80,
              80,
              95,
              80,
              69,
              82,
              95,
              65,
              68,
              68,
              95,
              80,
              82,
              79,
              79,
              70,
              62,
              60,
              47,
              65,
              80,
              80,
              95,
              80,
              69,
              82,
              95,
              65,
              68,
              68,
              95,
              80,
              82,
              79,
              79,
              70,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              65,
              80,
              80,
              95,
              67,
              79,
              82,
              95,
              65,
              68,
              68,
              95,
              80,
              82,
              79,
              79,
              70,
              62,
              60,
              47,
              65,
              80,
              80,
              95,
              67,
              79,
              82,
              95,
              65,
              68,
              68,
              95,
              80,
              82,
              79,
              79,
              70,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              47,
              65,
              80,
              80,
              95,
              80,
              65,
              78,
              95,
              73,
              78,
              81,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              65,
              80,
              80,
              95,
              80,
              65,
              78,
              95,
              83,
              85,
              77,
              77,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              65,
              80,
              80,
              95,
              79,
              84,
              72,
              75,
              82,
              65,
              95,
              67,
              79,
              68,
              69,
              62,
              67,
              86,
              76,
              60,
              47,
              65,
              80,
              80,
              95,
              79,
              84,
              72,
              75,
              82,
              65,
              95,
              67,
              79,
              68,
              69,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              65,
              80,
              80,
              95,
              79,
              84,
              72,
              75,
              82,
              65,
              95,
              66,
              65,
              84,
              67,
              72,
              62,
              49,
              50,
              51,
              52,
              60,
              47,
              65,
              80,
              80,
              95,
              79,
              84,
              72,
              75,
              82,
              65,
              95,
              66,
              65,
              84,
              67,
              72,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              65,
              80,
              80,
              95,
              82,
              69,
              81,
              95,
              68,
              65,
              84,
              69,
              62,
              48,
              52,
              45,
              48,
              57,
              45,
              50,
              48,
              50,
              53,
              60,
              47,
              65,
              80,
              80,
              95,
              82,
              69,
              81,
              95,
              68,
              65,
              84,
              69,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              65,
              80,
              80,
              95,
              82,
              69,
              83,
              80,
              79,
              78,
              83,
              69,
              95,
              68,
              65,
              84,
              69,
              62,
              48,
              52,
              45,
              48,
              57,
              45,
              50,
              48,
              50,
              53,
              32,
              48,
              55,
              58,
              52,
              49,
              58,
              49,
              56,
              60,
              47,
              65,
              80,
              80,
              95,
              82,
              69,
              83,
              80,
              79,
              78,
              83,
              69,
              95,
              68,
              65,
              84,
              69,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              65,
              80,
              80,
              95,
              84,
              79,
              84,
              65,
              76,
              95,
              82,
              69,
              67,
              62,
              49,
              60,
              47,
              65,
              80,
              80,
              95,
              84,
              79,
              84,
              65,
              76,
              95,
              82,
              69,
              67,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              47,
              65,
              80,
              80,
              95,
              80,
              65,
              78,
              95,
              83,
              85,
              77,
              77,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              47,
              65,
              80,
              80,
              95,
              82,
              69,
              83,
              95,
              82,
              79,
              79,
              84,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              47,
              80,
              65,
              78,
              86,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              82,
              101,
              115,
              117,
              108,
              116,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              47,
              80,
              65,
              78,
              86,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              62,
              10,
              32,
              32,
              60,
              47,
              115,
              111,
              97,
              112,
              49,
              50,
              58,
              66,
              111,
              100,
              121,
              62,
              10,
              60,
              47,
              115,
              111,
              97,
              112,
              49,
              50,
              58,
              69,
              110,
              118,
              101,
              108,
              111,
              112,
              101,
              62
            ]
          },
          "cookie": [],
          "responseTime": 83,
          "responseSize": 1450
        },
        "id": "c42aaeeb-af7c-494a-8b38-436869450480",
        "assertions": [
          {
            "assertion": "TC_INQ_REQ_022 - HTTP Status should be 200",
            "skipped": false
          },
          {
            "assertion": "TC_INQ_REQ_022 - Response time (< 5000ms)",
            "skipped": false
          },
          {
            "assertion": "TC_INQ_REQ_022 - Response content type is XML",
            "skipped": false
          },
          {
            "assertion": "TC_INQ_REQ_022 - Response has correct SOAP structure",
            "skipped": false
          },
          {
            "assertion": "TC_INQ_REQ_022 - APP_STATUS should be WEBERR-999",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "TC_INQ_REQ_022 - APP_STATUS should be WEBERR-999",
              "message": "expected 'WEBERR-044' to equal 'WEBERR-999'",
              "stack": "AssertionError: expected 'WEBERR-044' to equal 'WEBERR-999'\n   at Object.eval sandbox-script.js:5:1)"
            }
          },
          {
            "assertion": "TC_INQ_REQ_022 - PAN number echoed correctly",
            "skipped": false
          },
          {
            "assertion": "TC_INQ_REQ_022 - OKRA code preserved",
            "skipped": false
          },
          {
            "assertion": "TC_INQ_REQ_022 - OKRA batch preserved",
            "skipped": false
          },
          {
            "assertion": "TC_INQ_REQ_022 - Total records preserved",
            "skipped": false
          },
          {
            "assertion": "TC_INQ_REQ_022 - Response date is present",
            "skipped": false
          },
          {
            "assertion": "TC_INQ_REQ_022 - Valid SOAP response structure",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 1450
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 4,
          "test": "TC_INQ_REQ_022 - APP_STATUS should be WEBERR-999",
          "message": "expected 'WEBERR-044' to equal 'WEBERR-999'",
          "stack": "AssertionError: expected 'WEBERR-044' to equal 'WEBERR-999'\n   at Object.eval sandbox-script.js:5:1)",
          "checksum": "fa184867dc696a44eeee65fa02a6b000",
          "id": "b2ef57be-bac5-48ba-8ad7-16678fc43dc4",
          "timestamp": 1756971678244,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 5,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:4 in test-script",
        "source": {
          "id": "c42aaeeb-af7c-494a-8b38-436869450480",
          "name": "{{test_id}} - {{test_description}}",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "path": [
                "pan_validation"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "SOAPAction",
                "value": "{{protocol}}://{{base_url}}/pan_validation"
              },
              {
                "key": "Content-Type",
                "value": "application/xml"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <PANValidation xmlns=\"https://test.cvlkra.com/\">\n      <inputXML>\n        <![CDATA[\n          <APP_REQ_ROOT>\n            <APP_PAN_INQ>\n              <APP_PAN_NO>{{input_pan_no}}</APP_PAN_NO>\n              <APP_PAN_DOB>{{input_dob}}</APP_PAN_DOB>\n              <APP_IOP_FLG>{{input_iop_flag}}</APP_IOP_FLG>\n              <APP_POS_CODE>{{input_pos_code}}</APP_POS_CODE>\n            </APP_PAN_INQ>\n            <APP_SUMM_REC>\n              <APP_OTHKRA_CODE>{{input_okra_code}}</APP_OTHKRA_CODE>\n              <APP_OTHKRA_BATCH>{{input_okra_batch}}</APP_OTHKRA_BATCH>\n              <APP_REQ_DATE>{{input_request_date}}</APP_REQ_DATE>\n              <APP_TOTAL_REC>{{input_total_records}}</APP_TOTAL_REC>\n            </APP_SUMM_REC>\n          </APP_REQ_ROOT>\n        ]]>\n      </inputXML>\n      <userName>cvl.admin</userName>\n      <PosCode>cvlkra20</PosCode>\n      <password>{{password}}</password>\n      <PassKey>123</PassKey>\n    </PANValidation>\n  </soap12:Body>\n</soap12:Envelope>"
            }
          },
          "response": [],
          "event": []
        },
        "parent": {
          "item": [
            {
              "id": "c42aaeeb-af7c-494a-8b38-436869450480",
              "name": "{{test_id}} - {{test_description}}",
              "request": {
                "url": {
                  "protocol": "{{protocol}}",
                  "path": [
                    "pan_validation"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "SOAPAction",
                    "value": "{{protocol}}://{{base_url}}/pan_validation"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/xml"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <PANValidation xmlns=\"https://test.cvlkra.com/\">\n      <inputXML>\n        <![CDATA[\n          <APP_REQ_ROOT>\n            <APP_PAN_INQ>\n              <APP_PAN_NO>{{input_pan_no}}</APP_PAN_NO>\n              <APP_PAN_DOB>{{input_dob}}</APP_PAN_DOB>\n              <APP_IOP_FLG>{{input_iop_flag}}</APP_IOP_FLG>\n              <APP_POS_CODE>{{input_pos_code}}</APP_POS_CODE>\n            </APP_PAN_INQ>\n            <APP_SUMM_REC>\n              <APP_OTHKRA_CODE>{{input_okra_code}}</APP_OTHKRA_CODE>\n              <APP_OTHKRA_BATCH>{{input_okra_batch}}</APP_OTHKRA_BATCH>\n              <APP_REQ_DATE>{{input_request_date}}</APP_REQ_DATE>\n              <APP_TOTAL_REC>{{input_total_records}}</APP_TOTAL_REC>\n            </APP_SUMM_REC>\n          </APP_REQ_ROOT>\n        ]]>\n      </inputXML>\n      <userName>cvl.admin</userName>\n      <PosCode>cvlkra20</PosCode>\n      <password>{{password}}</password>\n      <PassKey>123</PassKey>\n    </PANValidation>\n  </soap12:Body>\n</soap12:Envelope>"
                }
              },
              "response": [],
              "event": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "837b8e22-ad37-4c2a-85e7-7d0a3c0e361e",
                "type": "text/javascript",
                "exec": [
                  "// Newman automatically sets all CSV column values as variables",
                  "// This runs once per CSV row (97 iterations total)",
                  "",
                  "// Set current date in dd-mm-yyyy format",
                  "const today = new Date().toLocaleDateString('en-GB').split('/').join('-');",
                  "pm.variables.set('input_request_date', today);",
                  "",
                  "const testId = pm.variables.get('test_id');",
                  "const testDescription = pm.variables.get('test_description');",
                  "const expectedHttp = pm.variables.get('expected_http_status');",
                  "const expectedApp = pm.variables.get('expected_app_status');",
                  "",
                  "// Log current test details",
                  "console.log(`\\n[TEST] Test ${testId}: ${testDescription}`);",
                  "console.log(`[INPUT] Input Data:`, {",
                  "    PAN: pm.variables.get('input_pan_no') || 'BLANK',",
                  "    DOB: pm.variables.get('input_dob') || 'BLANK',",
                  "    IOP: pm.variables.get('input_iop_flag') || 'BLANK',",
                  "    POS: pm.variables.get('input_pos_code') || 'BLANK',",
                  "    OKRA_Code: pm.variables.get('input_okra_code') || 'BLANK',",
                  "    OKRA_Batch: pm.variables.get('input_okra_batch') || 'BLANK',",
                  "    Req_Date: pm.variables.get('input_request_date') || 'BLANK',",
                  "    Total_Records: pm.variables.get('input_total_records') || 'BLANK'",
                  "});",
                  "console.log(`[EXPECTED] Expected: HTTP ${expectedHttp}, App: ${expectedApp}`);"
                ],
                "_lastExecutionId": "c0d090eb-e8c7-49e0-b1f6-dc4599b1eb9e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "997480f6-602d-436c-aa21-2a9b14587610",
                "type": "text/javascript",
                "exec": [
                  "// Get expected values from CSV data (automatically set by Newman)",
                  "const expectedHttpStatus = parseInt(pm.variables.get('expected_http_status'));",
                  "const expectedAppStatus = pm.variables.get('expected_app_status');",
                  "const testId = pm.variables.get('test_id');",
                  "const testDescription = pm.variables.get('test_description');",
                  "",
                  "// Test 1: HTTP Status Code",
                  "pm.test(`${testId} - HTTP Status should be ${expectedHttpStatus}`, function () {",
                  "    pm.response.to.have.status(expectedHttpStatus);",
                  "});",
                  "",
                  "// Test 2: Response Time",
                  "pm.test(`${testId} - Response time (< 5000ms)`, function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "// Test 3: Content Type",
                  "pm.test(`${testId} - Response content type is XML`, function () {",
                  "    const contentType = pm.response.headers.get('Content-Type');",
                  "    pm.expect(contentType).to.include('xml');",
                  "});",
                  "",
                  "// Parse XML and validate response fields",
                  "const responseText = pm.response.text();",
                  "const xml2js = require('xml2js');",
                  "const parseString = xml2js.parseString;",
                  "",
                  "parseString(responseText, { explicitArray: false }, (err, result) => {",
                  "    if (err) {",
                  "        console.error('Error parsing XML:', err);",
                  "        pm.test(`${testId} - XML response parseable`, function () {",
                  "            pm.expect.fail('Failed to parse XML response: ' + err.message);",
                  "        });",
                  "        return;",
                  "    }",
                  "    ",
                  "    try {",
                  "        // Extract response structure",
                  "        const envelope = result['soap12:Envelope'] || result['soap:Envelope'];",
                  "        const body = envelope['soap12:Body'] || envelope['soap:Body'];",
                  "        const panValidationResponse = body['PANValidationResponse'];",
                  "        const panValidationResult = panValidationResponse['PANValidationResult'];",
                  "        const appResRoot = panValidationResult['APP_RES_ROOT'];",
                  "        ",
                  "        if (expectedHttpStatus === 200) {",
                  "            // Validate response structure",
                  "            pm.test(`${testId} - Response has correct SOAP structure`, function () {",
                  "                pm.expect(appResRoot).to.be.an('object');",
                  "                pm.expect(appResRoot['APP_PAN_INQ']).to.be.an('object');",
                  "                pm.expect(appResRoot['APP_PAN_SUMM']).to.be.an('object');",
                  "            });",
                  "            ",
                  "            const panInq = appResRoot['APP_PAN_INQ'];",
                  "            const panSumm = appResRoot['APP_PAN_SUMM'];",
                  "            ",
                  "            // Test APP_STATUS field specifically",
                  "            pm.test(`${testId} - APP_STATUS should be ${expectedAppStatus}`, function () {",
                  "                pm.expect(panInq['APP_STATUS']).to.equal(expectedAppStatus);",
                  "            });",
                  "            ",
                  "            // Validate PAN number is returned",
                  "            const inputPan = pm.variables.get('input_pan_no');",
                  "            if (inputPan) {",
                  "                pm.test(`${testId} - PAN number echoed correctly`, function () {",
                  "                    pm.expect(panInq['APP_PAN_NO']).to.equal(inputPan);",
                  "                });",
                  "            }",
                  "            ",
                  "            // Validate OKRA code is returned",
                  "            const inputOkraCode = pm.variables.get('input_okra_code');",
                  "            if (inputOkraCode) {",
                  "                pm.test(`${testId} - OKRA code preserved`, function () {",
                  "                    pm.expect(panSumm['APP_OTHKRA_CODE']).to.equal(inputOkraCode);",
                  "                });",
                  "            }",
                  "            ",
                  "            // Validate OKRA batch is returned",
                  "            const inputOkraBatch = pm.variables.get('input_okra_batch');",
                  "            if (inputOkraBatch) {",
                  "                pm.test(`${testId} - OKRA batch preserved`, function () {",
                  "                    pm.expect(panSumm['APP_OTHKRA_BATCH']).to.equal(String(inputOkraBatch));",
                  "                });",
                  "            }",
                  "            ",
                  "            // Validate total records is returned",
                  "            const inputTotalRecords = pm.variables.get('input_total_records');",
                  "            if (inputTotalRecords) {",
                  "                pm.test(`${testId} - Total records preserved`, function () {",
                  "                    pm.expect(panSumm['APP_TOTAL_REC']).to.equal(String(inputTotalRecords));",
                  "                });",
                  "            }",
                  "            ",
                  "            // Validate response date format",
                  "            pm.test(`${testId} - Response date is present`, function () {",
                  "                const responseDate = panSumm['APP_RESPONSE_DATE'];",
                  "                pm.expect(responseDate).to.be.a('string');",
                  "                pm.expect(responseDate.length).to.be.greaterThan(0);",
                  "            });",
                  "            ",
                  "        } else {",
                  "            // For non-200 responses, still try to parse if XML structure exists",
                  "            console.log(`[${testId}] Non-200 response - checking for error structure`);",
                  "        }",
                  "        ",
                  "    } catch (parseError) {",
                  "        console.error('Error extracting fields from parsed XML:', parseError);",
                  "        pm.test(`${testId} - XML structure should be valid`, function () {",
                  "            pm.expect.fail('Failed to extract fields from XML: ' + parseError.message);",
                  "        });",
                  "    }",
                  "});",
                  "",
                  "// Test 5: SOAP Envelope Structure",
                  "pm.test(`${testId} - Valid SOAP response structure`, function () {",
                  "    pm.expect(responseText).to.match(/<soap.*:Envelope|<.*:Envelope/);",
                  "    pm.expect(responseText).to.include('PANValidation');",
                  "});",
                  "",
                  "// Log test completion",
                  "if (pm.test && pm.test.results && pm.test.results.length > 0) {",
                  "    const testResults = pm.test.results;",
                  "    const passed = testResults.filter(result => result.pass).length;",
                  "    const total = testResults.length;",
                  "    const status = passed === total ? '[PASS] PASS' : '[FAIL] FAIL';",
                  "    ",
                  "    console.log(`${status} ${testId}: ${passed}/${total} tests passed`);",
                  "    ",
                  "    if (passed < total) {",
                  "        const failures = testResults.filter(result => !result.pass);",
                  "        console.log('[FAIL] Failed assertions:');",
                  "        failures.forEach(failure => {",
                  "            console.log(`   - ${failure.name}`);",
                  "        });",
                  "    }",
                  "} else {",
                  "    console.log(`[COMPLETE] ${testId} - Tests completed`);",
                  "}"
                ],
                "_lastExecutionId": "e3a27b20-01ea-4adc-a8de-cf860036a801"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "localhost:8083",
              "key": "base_url"
            },
            {
              "type": "any",
              "value": "http",
              "key": "protocol"
            }
          ],
          "info": {
            "_postman_id": "aa3f0ef8-d277-4de6-adc7-188a9308e087",
            "name": "PAN_Validation_Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Data-driven collection for PAN validation API - executes with CSV data via Newman -d flag",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 1,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c1a6177b-1d06-4880-a29e-768a660e8d6b",
          "httpRequestId": "3fb93f20-ce5c-48c3-a756-aa8101ce0401",
          "scriptId": "997480f6-602d-436c-aa21-2a9b14587610",
          "execution": "e3a27b20-01ea-4adc-a8de-cf860036a801"
        }
      }
    ],
    "error": null
  }
}
